import numpy as np
import numpy.testing as npt
from astropy.tests.helper import raises

from skypy.utils.special import gammaincc


GAMMAINCC_VALUES = np.fromstring('''\
-7.3119860675415779e+01 -2.1537072648276303e+00 -3.6309929015892850e-01
-1.0315271604223741e-01 -3.7889128130304428e-02 -1.6233808783342241e-02
-7.7098041178340626e-03 -3.9423274992742563e-03 -2.1313270479725865e-03
-1.2035377824239912e-03 -7.0384757410124621e-04 -4.2364819806128828e-04
-2.6122046757803830e-04 -1.6440503735815071e-04 -1.0531544033653972e-04
-1.3111041651195364e+02 -5.9059017706732515e+00 -1.2086783228891798e+00
-3.8963034233525917e-01 -1.5718961412273602e-01 -7.2564729431881192e-02
-3.6664547942434567e-02 -1.9767789300082939e-02 -1.1193200711248963e-02
-6.5859013158549029e-03 -3.9966335810099896e-03 -2.4878285661551480e-03
-1.5820032671496342e-03 -1.0244129085539289e-03 -6.7380518524062794e-04
-1.8386570307468215e+01 -1.2602293178585096e+00 -3.1220319748832392e-01
-1.1398602813009684e-01 -5.0439239250003043e-02 -2.5061893413180547e-02
-1.3460893221765691e-02 -7.6470896635092434e-03 -4.5326137745962392e-03
-2.7775140504051610e-03 -1.7483183433912863e-03 -1.1251088773587270e-03
-7.3762277544453525e-04 -4.9129835925998400e-04 -3.3172926233215883e-04
 9.5139292871740313e+00  9.8477217000231310e-01  2.9418770868991340e-01
 1.2135329278972806e-01  5.8798561665540428e-02  3.1404751496664884e-02
 1.7912544818839526e-02  1.0713678718409003e-02  6.6429127121703235e-03
 4.2371217233031500e-03  2.7651269268006429e-03  1.8389108415780564e-03
 1.2425108924213335e-03  8.5098223466739675e-04  5.8968470656284300e-04
 4.4177862306075513e+00  6.8273711785929492e-01  2.4466336964690871e-01
 1.1366461632349811e-01  6.0171464597090107e-02  3.4491065620403383e-02
 2.0865839287737664e-02  1.3126590286934747e-02  8.5073467283279802e-03
 5.6444958482853025e-03  3.8168760663559453e-03  2.6219201312530638e-03
 1.8250771148151657e-03  1.2848611105901186e-03  9.1344142056781763e-04
-3.2545057035875491e-01 -7.3801545926107881e-02 -3.1498925608951289e-02
-1.6412518182077118e-02 -9.4664751065134389e-03 -5.8120186059460455e-03
-3.7236563720901561e-03 -2.4609787077078948e-03 -1.6655577882112027e-03
-1.1486035429058017e-03 -8.0428178655367333e-04 -5.7035470291588730e-04
-4.0881124147507109e-04 -2.9571534197425642e-04 -2.1560928221142639e-04
-1.0197766339980801e+00 -3.3057964474643176e-01 -1.6641838958917154e-01
-9.6729728281083949e-02 -6.0576202178449501e-02 -3.9736706181022097e-02
-2.6912201300866911e-02 -1.8659117332406439e-02 -1.3172235306518010e-02
-9.4329463848323858e-03 -6.8345040695523274e-03 -5.0002093845937789e-03
-3.6884373550489791e-03 -2.7400784805318157e-03 -2.0480761538586023e-03
-2.9161815552619386e-01 -1.3012776503786005e-01 -7.6275899137733028e-02
-4.9116135577842446e-02 -3.3250217234032986e-02 -2.3233585287954828e-02
-1.6596544899371235e-02 -1.2050890835441974e-02 -8.8616824703924291e-03
-6.5827281203316712e-03 -4.9305463805131566e-03 -3.7187105208815741e-03
-2.8212697187530722e-03 -2.1512754418047120e-03 -1.6476385247818914e-03
 3.9166115427103398e-01  2.2866927937170733e-01  1.5351359580832247e-01
 1.0856945586651912e-01  7.9025062595319495e-02  5.8602054528043790e-02
 4.4034033343462564e-02  3.3416444158979264e-02  2.5555733119551505e-02
 1.9666145490101594e-02  1.5211720706156506e-02  1.1817051039847537e-02
 9.2137484795398183e-03  7.2068060196617267e-03  5.6526726247353443e-03
 7.6078554552366962e-01  5.4684869846607254e-01  4.1213798672211421e-01
 3.1680395497579283e-01  2.4633076974699841e-01  1.9300654906195136e-01
 1.5206520469239826e-01  1.2031489421025299e-01  9.5511820898764310e-02
 7.6027743521550839e-02  6.0654782141157715e-02  4.8482464503953770e-02
 3.8816217879123593e-02  3.1121243239442542e-02  2.4982736264089866e-02
 9.1712826500495370e-01  7.6214142243622907e-01  6.3049817240370964e-01
 5.2046365383659576e-01  4.2905445726054714e-01  3.5336868806518440e-01
 2.9083168231342726e-01  2.3923277149530797e-01  1.9670311852706490e-01
 1.6167648239025967e-01  1.3284722493137946e-01  1.0913081312243156e-01
 8.9628622595284924e-02  7.3597430813612696e-02  6.0423395038945227e-02
 9.7394964765641212e-01  8.8585427363760183e-01  7.8610391597601148e-01
 6.8781927240591600e-01  5.9612475173655921e-01  5.1307099399393641e-01
 4.3923026645565477e-01  3.7441548938928371e-01  3.1805285446329790e-01
 2.6938848902848500e-01  2.2760643314921547e-01  1.9189600586784994e-01
 1.6148914263706238e-01  1.3567954861519094e-01  1.1383078096354249e-01
 9.9243073667510406e-01  9.4913876983583600e-01  8.8451400364747679e-01
 8.0959730047334988e-01  7.3115570300556754e-01  6.5345551611905583e-01
 5.7913628493490632e-01  5.0974403793971623e-01  4.4608408228788266e-01
 3.8846315610652871e-01  3.3685847858491791e-01  2.9103648802528559e-01
 2.5063614713241944e-01  2.1522697583063244e-01  1.8434894798284185e-01
 9.9794112864243356e-01  9.7872334687726870e-01  9.4128862794523283e-01
 8.9032665139458844e-01  8.3048002513847508e-01  7.6566976807982323e-01
 6.9898998852521488e-01  6.3276945179002464e-01  5.6868415546271600e-01
 5.0787802379032798e-01  4.5107483940082882e-01  3.9867534028560936e-01
 3.5083821649889668e-01  3.0754588097485003e-01  2.6865676241244119e-01
 9.9947090492308388e-01  9.9157443466207329e-01  9.7168798938208623e-01
 9.3995400081826375e-01  8.9818420443593427e-01  8.4874581389707127e-01
 7.9404232281281117e-01  7.3626471000554516e-01  6.7728429205896745e-01
 6.1862283220896619e-01  5.6146430419885451e-01  5.0668771460963336e-01
 4.5490890008186380e-01  4.0652428123144491e-01  3.6175264415193775e-01
''', sep=' ').reshape(15, 15)


def test_gammaincc_edge_cases():
    # test with scalar
    npt.assert_allclose(gammaincc(1.2, 1.5), 0.28893139222051745)

    # test with vector a
    npt.assert_allclose(gammaincc([-1.2, 1.2], 1.5),
                        [0.008769092458747352, 0.28893139222051745])

    # test with vector x
    npt.assert_allclose(gammaincc(1.2, [0.5, 1.5]),
                        [0.6962998597584569, 0.28893139222051745])

    # gammaincc is zero for x = inf
    assert gammaincc(1.2, np.inf) == 0
    assert gammaincc(-1.2, np.inf) == 0
    assert gammaincc(0, np.inf) == 0
    npt.assert_equal(gammaincc([1.2, 2.2], np.inf), [0, 0])
    npt.assert_equal(gammaincc([-1.2, -2.2], np.inf), [0, 0])
    npt.assert_equal(gammaincc([0.0, 1.0], np.inf), [0, 0])

    # gammaincc is zero for a = -1, -2, -3, ...
    assert gammaincc(-1.0, 0.5) == 0
    assert gammaincc(-2.0, 0.5) == 0
    npt.assert_equal(gammaincc([-1.0, -2.0], 0.5), [0, 0])

    # gammaincc is unity for a > 0 and x = 0
    assert gammaincc(0.5, 0) == 1
    assert gammaincc(1.5, 0) == 1
    npt.assert_equal(gammaincc([0.5, 1.5], 0), [1, 1])

    # gammaincc is zero for a nonpositive integer and x = 0
    assert gammaincc(0, 0) == 0
    assert gammaincc(-1, 0) == 0
    assert gammaincc(-2, 0) == 0
    npt.assert_equal(gammaincc([0, -1, -2], 0), [0, 0, 0])

    # gammaincc is infinity for a negative noninteger and x = 0
    assert gammaincc(-0.5, 0) == -np.inf
    assert gammaincc(-1.5, 0) == np.inf
    assert gammaincc(-2.5, 0) == -np.inf
    npt.assert_equal(gammaincc([-0.5, -1.5], 0), [-np.inf, np.inf])


def test_gammaincc_precision():
    # test precision against precomputed values
    a, x = np.ogrid[-2.95:2.95:0.4, 0.1:3:0.2]
    npt.assert_allclose(gammaincc(a, x), GAMMAINCC_VALUES)


@raises(ValueError)
def test_gammaincc_neg_x_scalar():
    # negative x raises an exception
    gammaincc(0.5, -1.0)


@raises(ValueError)
def test_gammaincc_neg_x_array():
    # negative x in array raises an exception
    gammaincc(0.5, [3.0, 2.0, 1.0, 0.0, -1.0])
